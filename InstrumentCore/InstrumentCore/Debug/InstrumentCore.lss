
InstrumentCore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ac  00800100  00000d2c  00000dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008007ac  008007ac  0000146c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001138  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000699  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3e  00000000  00000000  00002e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00003b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000495  00000000  00000000  00003f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a1  00000000  00000000  000043c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004d62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_1>
   8:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ac ea       	ldi	r26, 0xAC	; 172
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3b       	cpi	r26, 0xB3	; 179
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
  9e:	0c 94 94 06 	jmp	0xd28	; 0xd28 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	2a 9a       	sbi	0x05, 2	; 5
  a8:	00 00       	nop
  aa:	2a 98       	cbi	0x05, 2	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	29 98       	cbi	0x05, 1	; 5
  be:	54 9a       	sbi	0x0a, 4	; 10
  c0:	55 9a       	sbi	0x0a, 5	; 10
  c2:	56 9a       	sbi	0x0a, 6	; 10
  c4:	57 9a       	sbi	0x0a, 7	; 10
  c6:	5f 98       	cbi	0x0b, 7	; 11
  c8:	5e 98       	cbi	0x0b, 6	; 11
  ca:	5d 98       	cbi	0x0b, 5	; 11
  cc:	5c 98       	cbi	0x0b, 4	; 11
  ce:	cc 23       	and	r28, r28
  d0:	0c f4       	brge	.+2      	; 0xd4 <lcd_write+0x26>
  d2:	5f 9a       	sbi	0x0b, 7	; 11
  d4:	c6 fd       	sbrc	r28, 6
  d6:	5e 9a       	sbi	0x0b, 6	; 11
  d8:	c5 fd       	sbrc	r28, 5
  da:	5d 9a       	sbi	0x0b, 5	; 11
  dc:	c4 fd       	sbrc	r28, 4
  de:	5c 9a       	sbi	0x0b, 4	; 11
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e4:	5f 98       	cbi	0x0b, 7	; 11
  e6:	5e 98       	cbi	0x0b, 6	; 11
  e8:	5d 98       	cbi	0x0b, 5	; 11
  ea:	5c 98       	cbi	0x0b, 4	; 11
  ec:	c3 fd       	sbrc	r28, 3
  ee:	5f 9a       	sbi	0x0b, 7	; 11
  f0:	c2 fd       	sbrc	r28, 2
  f2:	5e 9a       	sbi	0x0b, 6	; 11
  f4:	c1 fd       	sbrc	r28, 1
  f6:	5d 9a       	sbi	0x0b, 5	; 11
  f8:	c0 fd       	sbrc	r28, 0
  fa:	5c 9a       	sbi	0x0b, 4	; 11
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 100:	5c 9a       	sbi	0x0b, 4	; 11
 102:	5d 9a       	sbi	0x0b, 5	; 11
 104:	5e 9a       	sbi	0x0b, 6	; 11
 106:	5f 9a       	sbi	0x0b, 7	; 11
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_read>:
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_read+0x8>
 110:	28 9a       	sbi	0x05, 0	; 5
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_read+0xa>
 114:	28 98       	cbi	0x05, 0	; 5
 116:	29 9a       	sbi	0x05, 1	; 5
 118:	54 98       	cbi	0x0a, 4	; 10
 11a:	55 98       	cbi	0x0a, 5	; 10
 11c:	56 98       	cbi	0x0a, 6	; 10
 11e:	57 98       	cbi	0x0a, 7	; 10
 120:	2a 9a       	sbi	0x05, 2	; 5
 122:	00 00       	nop
 124:	4c 9b       	sbis	0x09, 4	; 9
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_read+0x20>
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	4d 99       	sbic	0x09, 5	; 9
 130:	80 62       	ori	r24, 0x20	; 32
 132:	4e 99       	sbic	0x09, 6	; 9
 134:	80 64       	ori	r24, 0x40	; 64
 136:	4f 99       	sbic	0x09, 7	; 9
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	2a 98       	cbi	0x05, 2	; 5
 13c:	00 00       	nop
 13e:	2a 9a       	sbi	0x05, 2	; 5
 140:	00 00       	nop
 142:	4c 99       	sbic	0x09, 4	; 9
 144:	81 60       	ori	r24, 0x01	; 1
 146:	4d 99       	sbic	0x09, 5	; 9
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	4e 99       	sbic	0x09, 6	; 9
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	4f 99       	sbic	0x09, 7	; 9
 150:	88 60       	ori	r24, 0x08	; 8
 152:	2a 98       	cbi	0x05, 2	; 5
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 15c:	88 23       	and	r24, r24
 15e:	dc f3       	brlt	.-10     	; 0x156 <lcd_waitbusy>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_waitbusy+0xc>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_waitbusy+0xe>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 16a:	08 95       	ret

0000016c <lcd_command>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_clrscr>:
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 186:	08 95       	ret

00000188 <lcd_putc>:
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
 18c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 190:	ca 30       	cpi	r28, 0x0A	; 10
 192:	49 f4       	brne	.+18     	; 0x1a6 <lcd_putc+0x1e>
 194:	80 34       	cpi	r24, 0x40	; 64
 196:	10 f0       	brcs	.+4      	; 0x19c <lcd_putc+0x14>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	01 c0       	rjmp	.+2      	; 0x19e <lcd_putc+0x16>
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	80 58       	subi	r24, 0x80	; 128
 1a0:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_putc+0x26>
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_puts>:
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	29 f0       	breq	.+10     	; 0x1cc <lcd_puts+0x1a>
 1c2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_putc>
 1c6:	89 91       	ld	r24, Y+
 1c8:	81 11       	cpse	r24, r1
 1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <lcd_puts+0x10>
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1d2:	cf 93       	push	r28
 1d4:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1d6:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1d8:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1da:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1dc:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1de:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1e0:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1e2:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8f e9       	ldi	r24, 0x9F	; 159
 1e6:	9f e0       	ldi	r25, 0x0F	; 15
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x16>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0x1c>
 1ee:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 1f0:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 1f2:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1f4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1f8:	81 ee       	ldi	r24, 0xE1	; 225
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0x2a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_init+0x30>
 202:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 208:	95 e1       	ldi	r25, 0x15	; 21
 20a:	9a 95       	dec	r25
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x38>
 20e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 210:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 214:	85 e1       	ldi	r24, 0x15	; 21
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x44>
 21a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 21c:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 21e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 222:	95 e1       	ldi	r25, 0x15	; 21
 224:	9a 95       	dec	r25
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_init+0x52>
 228:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 236:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 240:	8c 2f       	mov	r24, r28
 242:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>

} /* lcd_init */
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <__vector_1>:
// Rotary Encoder ISR
volatile int instr_sel_nxt = 0;
volatile uint8_t note_offset = 0x3c; // C4

ISR(INT0_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	61 97       	sbiw	r28, 0x11	; 17
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	cd bf       	out	0x3d, r28	; 61
	if (!bit_is_clear(PINC, PC3))
 27e:	33 9b       	sbis	0x06, 3	; 6
 280:	50 c0       	rjmp	.+160    	; 0x322 <__vector_1+0xd8>
	{
		// Instrument Select
		if (!bit_is_clear(PIND, PD3))
 282:	4b 9b       	sbis	0x09, 3	; 9
 284:	14 c0       	rjmp	.+40     	; 0x2ae <__vector_1+0x64>
		{
			instr_sel_nxt = (instr_sel_nxt > 0) ? instr_sel_nxt-1 : 127;
 286:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <instr_sel_nxt>
 28a:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
 28e:	18 16       	cp	r1, r24
 290:	19 06       	cpc	r1, r25
 292:	34 f4       	brge	.+12     	; 0x2a0 <__vector_1+0x56>
 294:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <instr_sel_nxt>
 298:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__vector_1+0x5a>
 2a0:	8f e7       	ldi	r24, 0x7F	; 127
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <instr_sel_nxt+0x1>
 2a8:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <instr_sel_nxt>
 2ac:	11 c0       	rjmp	.+34     	; 0x2d0 <__vector_1+0x86>
		}
		else
		{
			instr_sel_nxt = (instr_sel_nxt+1) % 128;
 2ae:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <instr_sel_nxt>
 2b2:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	8f 77       	andi	r24, 0x7F	; 127
 2ba:	90 78       	andi	r25, 0x80	; 128
 2bc:	99 23       	and	r25, r25
 2be:	24 f4       	brge	.+8      	; 0x2c8 <__vector_1+0x7e>
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	9f 6f       	ori	r25, 0xFF	; 255
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <instr_sel_nxt+0x1>
 2cc:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <instr_sel_nxt>
		}
		char lcd_line1[17];
		sprintf(lcd_line1, "InstrSel: %d\n", instr_sel_nxt);
 2d0:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <instr_sel_nxt>
 2d4:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	8e 01       	movw	r16, r28
 2e6:	0f 5f       	subi	r16, 0xFF	; 255
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ea:	1f 93       	push	r17
 2ec:	0f 93       	push	r16
 2ee:	0e 94 bc 03 	call	0x778	; 0x778 <sprintf>
		lcd_clrscr();
 2f2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_clrscr>
		lcd_puts(lcd_line1);
 2f6:	c8 01       	movw	r24, r16
 2f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
		lcd_puts(midi_gm1_instr[instr_sel_nxt]);
 2fc:	e0 91 ad 07 	lds	r30, 0x07AD	; 0x8007ad <instr_sel_nxt>
 300:	f0 91 ae 07 	lds	r31, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	ed 5f       	subi	r30, 0xFD	; 253
 30a:	fe 4f       	sbci	r31, 0xFE	; 254
 30c:	80 81       	ld	r24, Z
 30e:	91 81       	ldd	r25, Z+1	; 0x01
 310:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	36 c0       	rjmp	.+108    	; 0x38e <__vector_1+0x144>
	}
	else
	{
		// Note Offset Selector
		if (!bit_is_clear(PIND, PD3))
 322:	4b 9b       	sbis	0x09, 3	; 9
 324:	0c c0       	rjmp	.+24     	; 0x33e <__vector_1+0xf4>
		{
			note_offset = (note_offset > 0) ? note_offset-1 : 127;
 326:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <note_offset>
 32a:	88 23       	and	r24, r24
 32c:	21 f0       	breq	.+8      	; 0x336 <__vector_1+0xec>
 32e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <note_offset>
 332:	81 50       	subi	r24, 0x01	; 1
 334:	01 c0       	rjmp	.+2      	; 0x338 <__vector_1+0xee>
 336:	8f e7       	ldi	r24, 0x7F	; 127
 338:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <note_offset>
 33c:	0e c0       	rjmp	.+28     	; 0x35a <__vector_1+0x110>
		}
		else
		{
			note_offset = (note_offset+1) % 128;
 33e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <note_offset>
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	8f 77       	andi	r24, 0x7F	; 127
 348:	90 78       	andi	r25, 0x80	; 128
 34a:	99 23       	and	r25, r25
 34c:	24 f4       	brge	.+8      	; 0x356 <__vector_1+0x10c>
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	80 68       	ori	r24, 0x80	; 128
 352:	9f 6f       	ori	r25, 0xFF	; 255
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <note_offset>
		}
		char lcd_line1[17];
		sprintf(lcd_line1, "Note Offset: %d\n", note_offset);
 35a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <note_offset>
 35e:	1f 92       	push	r1
 360:	8f 93       	push	r24
 362:	81 e1       	ldi	r24, 0x11	; 17
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	9f 93       	push	r25
 368:	8f 93       	push	r24
 36a:	8e 01       	movw	r16, r28
 36c:	0f 5f       	subi	r16, 0xFF	; 255
 36e:	1f 4f       	sbci	r17, 0xFF	; 255
 370:	1f 93       	push	r17
 372:	0f 93       	push	r16
 374:	0e 94 bc 03 	call	0x778	; 0x778 <sprintf>
		lcd_clrscr();
 378:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_clrscr>
		lcd_puts(lcd_line1);
 37c:	c8 01       	movw	r24, r16
 37e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	83 ec       	ldi	r24, 0xC3	; 195
 392:	99 e0       	ldi	r25, 0x09	; 9
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <__vector_1+0x14a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <__vector_1+0x154>
 39e:	00 00       	nop
	}
	_delay_ms(200);
}
 3a0:	61 96       	adiw	r28, 0x11	; 17
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	7f 91       	pop	r23
 3be:	6f 91       	pop	r22
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__vector_2>:

ISR(INT1_vect) {}
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <pbi_probe_dev_term>:
volatile int dev_addr_term = 0x08;
volatile uint8_t instr_data[3];
volatile uint8_t instr_data_idx = 0;

void pbi_probe_dev_term()
{
 3ea:	cf 93       	push	r28
	while (dev_addr_term > 0x08)
 3ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3f4:	09 97       	sbiw	r24, 0x09	; 9
 3f6:	34 f1       	brlt	.+76     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
	{
		pbi_start();
 3f8:	0e 94 90 03 	call	0x720	; 0x720 <pbi_start>
		pbi_write_addr(dev_addr_term, true);
 3fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 400:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	0e 94 a8 03 	call	0x750	; 0x750 <pbi_write_addr>
		uint8_t data = pbi_read_ack();
 40a:	0e 94 ad 03 	call	0x75a	; 0x75a <pbi_read_ack>
 40e:	c8 2f       	mov	r28, r24
		pbi_stop();
 410:	0e 94 99 03 	call	0x732	; 0x732 <pbi_stop>
		
		if (data == dev_addr_term)
 414:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 418:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 41c:	8c 2f       	mov	r24, r28
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	82 17       	cp	r24, r18
 422:	93 07       	cpc	r25, r19
 424:	79 f0       	breq	.+30     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
		{
			break;
		}
		else
		{
			dev_addr_term -= 1;
 426:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 42a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 434:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
volatile uint8_t instr_data[3];
volatile uint8_t instr_data_idx = 0;

void pbi_probe_dev_term()
{
	while (dev_addr_term > 0x08)
 438:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 43c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 440:	09 97       	sbiw	r24, 0x09	; 9
 442:	d4 f6       	brge	.-76     	; 0x3f8 <pbi_probe_dev_term+0xe>
		else
		{
			dev_addr_term -= 1;
		}
	}
}
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <pbi_instr_exec>:

void pbi_instr_exec()
{
	if (instr_data_idx == 1)
 448:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <__data_end>
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	41 f5       	brne	.+80     	; 0x4a0 <pbi_instr_exec+0x58>
	{
		if (instr_data[0] == 0x01)
 450:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <instr_data>
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	09 f0       	breq	.+2      	; 0x45a <pbi_instr_exec+0x12>
 458:	4a c0       	rjmp	.+148    	; 0x4ee <pbi_instr_exec+0xa6>
		{
			// Request to be assigned an address
			// (i) Probe last connected device
			pbi_probe_dev_term();
 45a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <pbi_probe_dev_term>
			// (ii) Assign next address
			if (dev_addr_term < 0x77)
 45e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 462:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 466:	87 37       	cpi	r24, 0x77	; 119
 468:	91 05       	cpc	r25, r1
 46a:	0c f0       	brlt	.+2      	; 0x46e <pbi_instr_exec+0x26>
 46c:	40 c0       	rjmp	.+128    	; 0x4ee <pbi_instr_exec+0xa6>
			{
				pbi_start();
 46e:	0e 94 90 03 	call	0x720	; 0x720 <pbi_start>
				pbi_write_addr(0x00, false);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	0e 94 a8 03 	call	0x750	; 0x750 <pbi_write_addr>
				pbi_write(dev_addr_term+1);
 47a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 47e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	0e 94 9d 03 	call	0x73a	; 0x73a <pbi_write>
				pbi_stop();
 488:	0e 94 99 03 	call	0x732	; 0x732 <pbi_stop>
				dev_addr_term += 1;
 48c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 490:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 49a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 49e:	08 95       	ret
			}
		}
	}
	else if (instr_data_idx == 3)
 4a0:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <__data_end>
 4a4:	83 30       	cpi	r24, 0x03	; 3
 4a6:	19 f5       	brne	.+70     	; 0x4ee <pbi_instr_exec+0xa6>
	{
		if (instr_data[1] == 0x01)
 4a8:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <instr_data+0x1>
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	f9 f4       	brne	.+62     	; 0x4ee <pbi_instr_exec+0xa6>
		{
			// Standard Key Actuation
			uint8_t note = ((instr_data[0]-0x09) + note_offset) % 128;
 4b0:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <instr_data>
 4b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <note_offset>
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	09 97       	sbiw	r24, 0x09	; 9
 4bc:	82 0f       	add	r24, r18
 4be:	91 1d       	adc	r25, r1
 4c0:	8f 77       	andi	r24, 0x7F	; 127
 4c2:	90 78       	andi	r25, 0x80	; 128
 4c4:	99 23       	and	r25, r25
 4c6:	24 f4       	brge	.+8      	; 0x4d0 <pbi_instr_exec+0x88>
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	80 68       	ori	r24, 0x80	; 128
 4cc:	9f 6f       	ori	r25, 0xFF	; 255
 4ce:	01 96       	adiw	r24, 0x01	; 1
			if (instr_data[2] != 0x00)
 4d0:	20 91 b2 07 	lds	r18, 0x07B2	; 0x8007b2 <instr_data+0x2>
 4d4:	22 23       	and	r18, r18
 4d6:	31 f0       	breq	.+12     	; 0x4e4 <pbi_instr_exec+0x9c>
			{
				PORTC |= _BV(2);
 4d8:	42 9a       	sbi	0x08, 2	; 8
				midi_send_noteon(note, instr_data[2]);
 4da:	60 91 b2 07 	lds	r22, 0x07B2	; 0x8007b2 <instr_data+0x2>
 4de:	0e 94 50 03 	call	0x6a0	; 0x6a0 <midi_send_noteon>
 4e2:	08 95       	ret
			}
			else
			{
				PORTC &= ~(_BV(2));
 4e4:	42 98       	cbi	0x08, 2	; 8
				midi_send_noteoff(note, instr_data[2]);
 4e6:	60 91 b2 07 	lds	r22, 0x07B2	; 0x8007b2 <instr_data+0x2>
 4ea:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <midi_send_noteoff>
 4ee:	08 95       	ret

000004f0 <pbi_instr_clear>:

void pbi_instr_clear()
{
	for (uint8_t i = 0; i < sizeof(instr_data); i++)
	{
		instr_data[i] = 0;
 4f0:	e0 eb       	ldi	r30, 0xB0	; 176
 4f2:	f7 e0       	ldi	r31, 0x07	; 7
 4f4:	10 82       	st	Z, r1
 4f6:	11 82       	std	Z+1, r1	; 0x01
 4f8:	12 82       	std	Z+2, r1	; 0x02
	}
	instr_data_idx = 0;
 4fa:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <__data_end>
 4fe:	08 95       	ret

00000500 <__vector_24>:
}

ISR(TWI_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	cli();
 522:	f8 94       	cli
	
	switch(pbi_get_status())
 524:	0e 94 b8 03 	call	0x770	; 0x770 <pbi_get_status>
 528:	80 38       	cpi	r24, 0x80	; 128
 52a:	51 f0       	breq	.+20     	; 0x540 <__vector_24+0x40>
 52c:	88 3b       	cpi	r24, 0xB8	; 184
 52e:	f9 f0       	breq	.+62     	; 0x56e <__vector_24+0x6e>
 530:	80 36       	cpi	r24, 0x60	; 96
 532:	19 f5       	brne	.+70     	; 0x57a <__vector_24+0x7a>
	{
	case TW_SR_SLA_ACK:
		// START Condition, device addressed
		TWCR |= (_BV(TWIE) | _BV(TWINT) | _BV(TWEA) | _BV(TWEN));
 534:	ec eb       	ldi	r30, 0xBC	; 188
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	85 6c       	ori	r24, 0xC5	; 197
 53c:	80 83       	st	Z, r24
		break;
 53e:	26 c0       	rjmp	.+76     	; 0x58c <__vector_24+0x8c>
	case TW_SR_DATA_ACK:
		// Device in receiver mode, data available
		if (instr_data_idx < sizeof(instr_data))
 540:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <__data_end>
 544:	83 30       	cpi	r24, 0x03	; 3
 546:	68 f4       	brcc	.+26     	; 0x562 <__vector_24+0x62>
		{
			instr_data[instr_data_idx] = TWDR;
 548:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <__data_end>
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 552:	e0 55       	subi	r30, 0x50	; 80
 554:	f8 4f       	sbci	r31, 0xF8	; 248
 556:	80 83       	st	Z, r24
			instr_data_idx += 1;
 558:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <__data_end>
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <__data_end>
		}
		TWCR |= (_BV(TWIE) | _BV(TWINT) | _BV(TWEA) | _BV(TWEN));		
 562:	ec eb       	ldi	r30, 0xBC	; 188
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	85 6c       	ori	r24, 0xC5	; 197
 56a:	80 83       	st	Z, r24
		break;
 56c:	0f c0       	rjmp	.+30     	; 0x58c <__vector_24+0x8c>
	case TW_ST_DATA_ACK:
		// Device in transmitter mode, send data
		// ...		
		TWCR |= (_BV(TWIE) | _BV(TWINT) | _BV(TWEA) | _BV(TWEN));		
 56e:	ec eb       	ldi	r30, 0xBC	; 188
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	85 6c       	ori	r24, 0xC5	; 197
 576:	80 83       	st	Z, r24
		break;
 578:	09 c0       	rjmp	.+18     	; 0x58c <__vector_24+0x8c>
	default:
		// STOP Condition
		pbi_instr_exec();
 57a:	0e 94 24 02 	call	0x448	; 0x448 <pbi_instr_exec>
		pbi_instr_clear();		
 57e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <pbi_instr_clear>
		TWCR |= (_BV(TWIE) | _BV(TWEA) | _BV(TWEN));
 582:	ec eb       	ldi	r30, 0xBC	; 188
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	85 64       	ori	r24, 0x45	; 69
 58a:	80 83       	st	Z, r24
	}

	sei();
 58c:	78 94       	sei
}
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <main>:

int main(void)
{
	// Enable port for RGB LED
	DDRC |= _BV(2);
 5b0:	3a 9a       	sbi	0x07, 2	; 7
	
	// Enable ports for Rotary Encoder
	DDRD &= ~(_BV(3) | _BV(2));
 5b2:	8a b1       	in	r24, 0x0a	; 10
 5b4:	83 7f       	andi	r24, 0xF3	; 243
 5b6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (_BV(3) | _BV(2));
 5b8:	8b b1       	in	r24, 0x0b	; 11
 5ba:	8c 60       	ori	r24, 0x0C	; 12
 5bc:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= (_BV(INT0) | _BV(INT1));
 5be:	8d b3       	in	r24, 0x1d	; 29
 5c0:	83 60       	ori	r24, 0x03	; 3
 5c2:	8d bb       	out	0x1d, r24	; 29
	MCUCR |= (_BV(ISC01) | _BV(ISC11) | _BV(ISC10));	
 5c4:	85 b7       	in	r24, 0x35	; 53
 5c6:	8e 60       	ori	r24, 0x0E	; 14
 5c8:	85 bf       	out	0x35, r24	; 53
	DDRC &= ~(_BV(3));
 5ca:	3b 98       	cbi	0x07, 3	; 7
	PORTC &= ~(_BV(3));
 5cc:	43 98       	cbi	0x08, 3	; 8
	
	// Initialize MIDI
	midi_init();
 5ce:	0e 94 20 03 	call	0x640	; 0x640 <midi_init>
	midi_set_channel(1);
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 31 03 	call	0x662	; 0x662 <midi_set_channel>
	
	// Set the MIDI instrument
	int instr_sel = 0; // todo: Read saved value from EEPROM
	midi_send_programchange(instr_sel);
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 40 03 	call	0x680	; 0x680 <midi_send_programchange>
	
	// Initialize Peripheral Bus
	pbi_init();
 5de:	0e 94 84 03 	call	0x708	; 0x708 <pbi_init>
	
	// Initialize Character LCD
	lcd_init(LCD_DISP_ON);
 5e2:	8c e0       	ldi	r24, 0x0C	; 12
 5e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_init>
	lcd_clrscr();
 5e8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_clrscr>
	lcd_puts("ModulrMusicInst\n");
 5ec:	82 e2       	ldi	r24, 0x22	; 34
 5ee:	92 e0       	ldi	r25, 0x02	; 2
 5f0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
	lcd_puts(midi_gm1_instr[instr_sel_nxt]);
 5f4:	e0 91 ad 07 	lds	r30, 0x07AD	; 0x8007ad <instr_sel_nxt>
 5f8:	f0 91 ae 07 	lds	r31, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	ed 5f       	subi	r30, 0xFD	; 253
 602:	fe 4f       	sbci	r31, 0xFE	; 254
 604:	80 81       	ld	r24, Z
 606:	91 81       	ldd	r25, Z+1	; 0x01
 608:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts>
	
	// Enable Interrupts
	sei();	
 60c:	78 94       	sei
	// Initialize MIDI
	midi_init();
	midi_set_channel(1);
	
	// Set the MIDI instrument
	int instr_sel = 0; // todo: Read saved value from EEPROM
 60e:	c0 e0       	ldi	r28, 0x00	; 0
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	0c e3       	ldi	r16, 0x3C	; 60
 614:	10 e0       	ldi	r17, 0x00	; 0
	
	// Main Program
	while (1) {
		for (int note=0x1E; note < 0x5A; note++) {
			// Process instrument change (if any)
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 616:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 618:	f8 94       	cli
			{
				if (instr_sel_nxt != instr_sel)
 61a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <instr_sel_nxt>
 61e:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
 622:	8c 17       	cp	r24, r28
 624:	9d 07       	cpc	r25, r29
 626:	39 f0       	breq	.+14     	; 0x636 <main+0x86>
				{
					instr_sel = instr_sel_nxt;
 628:	c0 91 ad 07 	lds	r28, 0x07AD	; 0x8007ad <instr_sel_nxt>
 62c:	d0 91 ae 07 	lds	r29, 0x07AE	; 0x8007ae <instr_sel_nxt+0x1>
					midi_send_programchange(instr_sel);
 630:	8c 2f       	mov	r24, r28
 632:	0e 94 40 03 	call	0x680	; 0x680 <midi_send_programchange>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 636:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
 638:	01 50       	subi	r16, 0x01	; 1
 63a:	11 09       	sbc	r17, r1
	// Enable Interrupts
	sei();	
	
	// Main Program
	while (1) {
		for (int note=0x1E; note < 0x5A; note++) {
 63c:	61 f7       	brne	.-40     	; 0x616 <main+0x66>
 63e:	e9 cf       	rjmp	.-46     	; 0x612 <main+0x62>

00000640 <midi_init>:

static uint8_t default_channel = 0;

void midi_init()
{
	UCSR0B = _BV(TXEN0); // Enable Tx
 640:	88 e0       	ldi	r24, 0x08	; 8
 642:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit Messages
 646:	86 e0       	ldi	r24, 0x06	; 6
 648:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// USART Baud Rate Register
	UBRR0H = UBRRH_VALUE;
 64c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 650:	8f e1       	ldi	r24, 0x1F	; 31
 652:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 656:	e0 ec       	ldi	r30, 0xC0	; 192
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	8d 7f       	andi	r24, 0xFD	; 253
 65e:	80 83       	st	Z, r24
 660:	08 95       	ret

00000662 <midi_set_channel>:
	#endif
}

void midi_set_channel(uint8_t channel)
{
	default_channel = (channel >= 1 && channel <= 16) ? channel - 1 : 0;
 662:	81 50       	subi	r24, 0x01	; 1
 664:	80 31       	cpi	r24, 0x10	; 16
 666:	08 f0       	brcs	.+2      	; 0x66a <midi_set_channel+0x8>
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <default_channel>
 66e:	08 95       	ret

00000670 <_midi_send_byte>:
	_midi_send_byte(CLAMP(velocity, 0, 127));
}

void _midi_send_byte(uint8_t value)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 670:	e0 ec       	ldi	r30, 0xC0	; 192
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	90 81       	ld	r25, Z
 676:	95 ff       	sbrs	r25, 5
 678:	fd cf       	rjmp	.-6      	; 0x674 <_midi_send_byte+0x4>
	UDR0 = value;
 67a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 67e:	08 95       	ret

00000680 <midi_send_programchange>:
{
	default_channel = (channel >= 1 && channel <= 16) ? channel - 1 : 0;
}

void midi_send_programchange(uint8_t program)
{
 680:	cf 93       	push	r28
 682:	c8 2f       	mov	r28, r24
	_midi_send_byte((0xc << 4) | default_channel);
 684:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <default_channel>
 688:	80 6c       	ori	r24, 0xC0	; 192
 68a:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
	_midi_send_byte(CLAMP(program, 0, 127));
 68e:	cc 23       	and	r28, r28
 690:	14 f0       	brlt	.+4      	; 0x696 <midi_send_programchange+0x16>
 692:	8c 2f       	mov	r24, r28
 694:	01 c0       	rjmp	.+2      	; 0x698 <midi_send_programchange+0x18>
 696:	8f e7       	ldi	r24, 0x7F	; 127
 698:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
}
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <midi_send_noteon>:

void midi_send_noteon(uint8_t note, uint8_t velocity)
{
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	d8 2f       	mov	r29, r24
 6a6:	c6 2f       	mov	r28, r22
	_midi_send_byte((0x9 << 4) | default_channel);
 6a8:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <default_channel>
 6ac:	80 69       	ori	r24, 0x90	; 144
 6ae:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
	_midi_send_byte(CLAMP(note, 0, 127));
 6b2:	dd 23       	and	r29, r29
 6b4:	14 f0       	brlt	.+4      	; 0x6ba <midi_send_noteon+0x1a>
 6b6:	8d 2f       	mov	r24, r29
 6b8:	01 c0       	rjmp	.+2      	; 0x6bc <midi_send_noteon+0x1c>
 6ba:	8f e7       	ldi	r24, 0x7F	; 127
 6bc:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
	_midi_send_byte(CLAMP(velocity, 0, 127));
 6c0:	cc 23       	and	r28, r28
 6c2:	14 f0       	brlt	.+4      	; 0x6c8 <midi_send_noteon+0x28>
 6c4:	8c 2f       	mov	r24, r28
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <midi_send_noteon+0x2a>
 6c8:	8f e7       	ldi	r24, 0x7F	; 127
 6ca:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	08 95       	ret

000006d4 <midi_send_noteoff>:

void midi_send_noteoff(uint8_t note, uint8_t velocity)
{
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	d8 2f       	mov	r29, r24
 6da:	c6 2f       	mov	r28, r22
	_midi_send_byte((0x8 << 4) | default_channel);
 6dc:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <default_channel>
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
	_midi_send_byte(CLAMP(note, 0, 127));
 6e6:	dd 23       	and	r29, r29
 6e8:	14 f0       	brlt	.+4      	; 0x6ee <midi_send_noteoff+0x1a>
 6ea:	8d 2f       	mov	r24, r29
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <midi_send_noteoff+0x1c>
 6ee:	8f e7       	ldi	r24, 0x7F	; 127
 6f0:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
	_midi_send_byte(CLAMP(velocity, 0, 127));
 6f4:	cc 23       	and	r28, r28
 6f6:	14 f0       	brlt	.+4      	; 0x6fc <midi_send_noteoff+0x28>
 6f8:	8c 2f       	mov	r24, r28
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <midi_send_noteoff+0x2a>
 6fc:	8f e7       	ldi	r24, 0x7F	; 127
 6fe:	0e 94 38 03 	call	0x670	; 0x670 <_midi_send_byte>
}
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	08 95       	ret

00000708 <pbi_init>:
uint8_t pbi_read_nack()
{
	TWCR = _BV(TWINT) | _BV(TWEN);
	while ((TWCR & _BV(TWINT)) == 0);
	return TWDR;
}
 708:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 70c:	88 e4       	ldi	r24, 0x48	; 72
 70e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 712:	80 e1       	ldi	r24, 0x10	; 16
 714:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 718:	85 ec       	ldi	r24, 0xC5	; 197
 71a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 71e:	08 95       	ret

00000720 <pbi_start>:
 720:	84 ea       	ldi	r24, 0xA4	; 164
 722:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 726:	ec eb       	ldi	r30, 0xBC	; 188
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	88 23       	and	r24, r24
 72e:	ec f7       	brge	.-6      	; 0x72a <pbi_start+0xa>
 730:	08 95       	ret

00000732 <pbi_stop>:
 732:	84 e9       	ldi	r24, 0x94	; 148
 734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 738:	08 95       	ret

0000073a <pbi_write>:
 73a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 73e:	84 e8       	ldi	r24, 0x84	; 132
 740:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 744:	ec eb       	ldi	r30, 0xBC	; 188
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	88 23       	and	r24, r24
 74c:	ec f7       	brge	.-6      	; 0x748 <pbi_write+0xe>
 74e:	08 95       	ret

00000750 <pbi_write_addr>:
 750:	88 0f       	add	r24, r24
 752:	86 2b       	or	r24, r22
 754:	0e 94 9d 03 	call	0x73a	; 0x73a <pbi_write>
 758:	08 95       	ret

0000075a <pbi_read_ack>:
 75a:	84 ec       	ldi	r24, 0xC4	; 196
 75c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 760:	ec eb       	ldi	r30, 0xBC	; 188
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	88 23       	and	r24, r24
 768:	ec f7       	brge	.-6      	; 0x764 <pbi_read_ack+0xa>
 76a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 76e:	08 95       	ret

00000770 <pbi_get_status>:

uint8_t pbi_get_status()
{
	return TWSR & 0xf8;
 770:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
}
 774:	88 7f       	andi	r24, 0xF8	; 248
 776:	08 95       	ret

00000778 <sprintf>:
 778:	ae e0       	ldi	r26, 0x0E	; 14
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	e2 ec       	ldi	r30, 0xC2	; 194
 77e:	f3 e0       	ldi	r31, 0x03	; 3
 780:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__prologue_saves__+0x1c>
 784:	0d 89       	ldd	r16, Y+21	; 0x15
 786:	1e 89       	ldd	r17, Y+22	; 0x16
 788:	86 e0       	ldi	r24, 0x06	; 6
 78a:	8c 83       	std	Y+4, r24	; 0x04
 78c:	1a 83       	std	Y+2, r17	; 0x02
 78e:	09 83       	std	Y+1, r16	; 0x01
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	9f e7       	ldi	r25, 0x7F	; 127
 794:	9e 83       	std	Y+6, r25	; 0x06
 796:	8d 83       	std	Y+5, r24	; 0x05
 798:	ae 01       	movw	r20, r28
 79a:	47 5e       	subi	r20, 0xE7	; 231
 79c:	5f 4f       	sbci	r21, 0xFF	; 255
 79e:	6f 89       	ldd	r22, Y+23	; 0x17
 7a0:	78 8d       	ldd	r23, Y+24	; 0x18
 7a2:	ce 01       	movw	r24, r28
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	0e 94 df 03 	call	0x7be	; 0x7be <vfprintf>
 7aa:	2f 81       	ldd	r18, Y+7	; 0x07
 7ac:	38 85       	ldd	r19, Y+8	; 0x08
 7ae:	f8 01       	movw	r30, r16
 7b0:	e2 0f       	add	r30, r18
 7b2:	f3 1f       	adc	r31, r19
 7b4:	10 82       	st	Z, r1
 7b6:	2e 96       	adiw	r28, 0x0e	; 14
 7b8:	e4 e0       	ldi	r30, 0x04	; 4
 7ba:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__epilogue_restores__+0x1c>

000007be <vfprintf>:
 7be:	ac e0       	ldi	r26, 0x0C	; 12
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	e5 ee       	ldi	r30, 0xE5	; 229
 7c4:	f3 e0       	ldi	r31, 0x03	; 3
 7c6:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__prologue_saves__>
 7ca:	7c 01       	movw	r14, r24
 7cc:	6b 01       	movw	r12, r22
 7ce:	8a 01       	movw	r16, r20
 7d0:	fc 01       	movw	r30, r24
 7d2:	17 82       	std	Z+7, r1	; 0x07
 7d4:	16 82       	std	Z+6, r1	; 0x06
 7d6:	83 81       	ldd	r24, Z+3	; 0x03
 7d8:	81 ff       	sbrs	r24, 1
 7da:	bd c1       	rjmp	.+890    	; 0xb56 <__stack+0x257>
 7dc:	ce 01       	movw	r24, r28
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	4c 01       	movw	r8, r24
 7e2:	f7 01       	movw	r30, r14
 7e4:	93 81       	ldd	r25, Z+3	; 0x03
 7e6:	f6 01       	movw	r30, r12
 7e8:	93 fd       	sbrc	r25, 3
 7ea:	85 91       	lpm	r24, Z+
 7ec:	93 ff       	sbrs	r25, 3
 7ee:	81 91       	ld	r24, Z+
 7f0:	6f 01       	movw	r12, r30
 7f2:	88 23       	and	r24, r24
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <vfprintf+0x3a>
 7f6:	ab c1       	rjmp	.+854    	; 0xb4e <__stack+0x24f>
 7f8:	85 32       	cpi	r24, 0x25	; 37
 7fa:	39 f4       	brne	.+14     	; 0x80a <vfprintf+0x4c>
 7fc:	93 fd       	sbrc	r25, 3
 7fe:	85 91       	lpm	r24, Z+
 800:	93 ff       	sbrs	r25, 3
 802:	81 91       	ld	r24, Z+
 804:	6f 01       	movw	r12, r30
 806:	85 32       	cpi	r24, 0x25	; 37
 808:	29 f4       	brne	.+10     	; 0x814 <vfprintf+0x56>
 80a:	b7 01       	movw	r22, r14
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 812:	e7 cf       	rjmp	.-50     	; 0x7e2 <vfprintf+0x24>
 814:	51 2c       	mov	r5, r1
 816:	31 2c       	mov	r3, r1
 818:	20 e0       	ldi	r18, 0x00	; 0
 81a:	20 32       	cpi	r18, 0x20	; 32
 81c:	a0 f4       	brcc	.+40     	; 0x846 <vfprintf+0x88>
 81e:	8b 32       	cpi	r24, 0x2B	; 43
 820:	69 f0       	breq	.+26     	; 0x83c <vfprintf+0x7e>
 822:	30 f4       	brcc	.+12     	; 0x830 <vfprintf+0x72>
 824:	80 32       	cpi	r24, 0x20	; 32
 826:	59 f0       	breq	.+22     	; 0x83e <vfprintf+0x80>
 828:	83 32       	cpi	r24, 0x23	; 35
 82a:	69 f4       	brne	.+26     	; 0x846 <vfprintf+0x88>
 82c:	20 61       	ori	r18, 0x10	; 16
 82e:	2c c0       	rjmp	.+88     	; 0x888 <vfprintf+0xca>
 830:	8d 32       	cpi	r24, 0x2D	; 45
 832:	39 f0       	breq	.+14     	; 0x842 <vfprintf+0x84>
 834:	80 33       	cpi	r24, 0x30	; 48
 836:	39 f4       	brne	.+14     	; 0x846 <vfprintf+0x88>
 838:	21 60       	ori	r18, 0x01	; 1
 83a:	26 c0       	rjmp	.+76     	; 0x888 <vfprintf+0xca>
 83c:	22 60       	ori	r18, 0x02	; 2
 83e:	24 60       	ori	r18, 0x04	; 4
 840:	23 c0       	rjmp	.+70     	; 0x888 <vfprintf+0xca>
 842:	28 60       	ori	r18, 0x08	; 8
 844:	21 c0       	rjmp	.+66     	; 0x888 <vfprintf+0xca>
 846:	27 fd       	sbrc	r18, 7
 848:	27 c0       	rjmp	.+78     	; 0x898 <vfprintf+0xda>
 84a:	30 ed       	ldi	r19, 0xD0	; 208
 84c:	38 0f       	add	r19, r24
 84e:	3a 30       	cpi	r19, 0x0A	; 10
 850:	78 f4       	brcc	.+30     	; 0x870 <vfprintf+0xb2>
 852:	26 ff       	sbrs	r18, 6
 854:	06 c0       	rjmp	.+12     	; 0x862 <vfprintf+0xa4>
 856:	fa e0       	ldi	r31, 0x0A	; 10
 858:	5f 9e       	mul	r5, r31
 85a:	30 0d       	add	r19, r0
 85c:	11 24       	eor	r1, r1
 85e:	53 2e       	mov	r5, r19
 860:	13 c0       	rjmp	.+38     	; 0x888 <vfprintf+0xca>
 862:	8a e0       	ldi	r24, 0x0A	; 10
 864:	38 9e       	mul	r3, r24
 866:	30 0d       	add	r19, r0
 868:	11 24       	eor	r1, r1
 86a:	33 2e       	mov	r3, r19
 86c:	20 62       	ori	r18, 0x20	; 32
 86e:	0c c0       	rjmp	.+24     	; 0x888 <vfprintf+0xca>
 870:	8e 32       	cpi	r24, 0x2E	; 46
 872:	21 f4       	brne	.+8      	; 0x87c <vfprintf+0xbe>
 874:	26 fd       	sbrc	r18, 6
 876:	6b c1       	rjmp	.+726    	; 0xb4e <__stack+0x24f>
 878:	20 64       	ori	r18, 0x40	; 64
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0xca>
 87c:	8c 36       	cpi	r24, 0x6C	; 108
 87e:	11 f4       	brne	.+4      	; 0x884 <vfprintf+0xc6>
 880:	20 68       	ori	r18, 0x80	; 128
 882:	02 c0       	rjmp	.+4      	; 0x888 <vfprintf+0xca>
 884:	88 36       	cpi	r24, 0x68	; 104
 886:	41 f4       	brne	.+16     	; 0x898 <vfprintf+0xda>
 888:	f6 01       	movw	r30, r12
 88a:	93 fd       	sbrc	r25, 3
 88c:	85 91       	lpm	r24, Z+
 88e:	93 ff       	sbrs	r25, 3
 890:	81 91       	ld	r24, Z+
 892:	6f 01       	movw	r12, r30
 894:	81 11       	cpse	r24, r1
 896:	c1 cf       	rjmp	.-126    	; 0x81a <vfprintf+0x5c>
 898:	98 2f       	mov	r25, r24
 89a:	9f 7d       	andi	r25, 0xDF	; 223
 89c:	95 54       	subi	r25, 0x45	; 69
 89e:	93 30       	cpi	r25, 0x03	; 3
 8a0:	28 f4       	brcc	.+10     	; 0x8ac <vfprintf+0xee>
 8a2:	0c 5f       	subi	r16, 0xFC	; 252
 8a4:	1f 4f       	sbci	r17, 0xFF	; 255
 8a6:	ff e3       	ldi	r31, 0x3F	; 63
 8a8:	f9 83       	std	Y+1, r31	; 0x01
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <vfprintf+0x108>
 8ac:	83 36       	cpi	r24, 0x63	; 99
 8ae:	31 f0       	breq	.+12     	; 0x8bc <vfprintf+0xfe>
 8b0:	83 37       	cpi	r24, 0x73	; 115
 8b2:	71 f0       	breq	.+28     	; 0x8d0 <vfprintf+0x112>
 8b4:	83 35       	cpi	r24, 0x53	; 83
 8b6:	09 f0       	breq	.+2      	; 0x8ba <vfprintf+0xfc>
 8b8:	5b c0       	rjmp	.+182    	; 0x970 <__stack+0x71>
 8ba:	22 c0       	rjmp	.+68     	; 0x900 <__stack+0x1>
 8bc:	f8 01       	movw	r30, r16
 8be:	80 81       	ld	r24, Z
 8c0:	89 83       	std	Y+1, r24	; 0x01
 8c2:	0e 5f       	subi	r16, 0xFE	; 254
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	44 24       	eor	r4, r4
 8c8:	43 94       	inc	r4
 8ca:	51 2c       	mov	r5, r1
 8cc:	54 01       	movw	r10, r8
 8ce:	15 c0       	rjmp	.+42     	; 0x8fa <vfprintf+0x13c>
 8d0:	38 01       	movw	r6, r16
 8d2:	f2 e0       	ldi	r31, 0x02	; 2
 8d4:	6f 0e       	add	r6, r31
 8d6:	71 1c       	adc	r7, r1
 8d8:	f8 01       	movw	r30, r16
 8da:	a0 80       	ld	r10, Z
 8dc:	b1 80       	ldd	r11, Z+1	; 0x01
 8de:	26 ff       	sbrs	r18, 6
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <vfprintf+0x12a>
 8e2:	65 2d       	mov	r22, r5
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x12e>
 8e8:	6f ef       	ldi	r22, 0xFF	; 255
 8ea:	7f ef       	ldi	r23, 0xFF	; 255
 8ec:	c5 01       	movw	r24, r10
 8ee:	2c 87       	std	Y+12, r18	; 0x0c
 8f0:	0e 94 bc 05 	call	0xb78	; 0xb78 <strnlen>
 8f4:	2c 01       	movw	r4, r24
 8f6:	83 01       	movw	r16, r6
 8f8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8fa:	2f 77       	andi	r18, 0x7F	; 127
 8fc:	22 2e       	mov	r2, r18
 8fe:	17 c0       	rjmp	.+46     	; 0x92e <__stack+0x2f>
 900:	38 01       	movw	r6, r16
 902:	f2 e0       	ldi	r31, 0x02	; 2
 904:	6f 0e       	add	r6, r31
 906:	71 1c       	adc	r7, r1
 908:	f8 01       	movw	r30, r16
 90a:	a0 80       	ld	r10, Z
 90c:	b1 80       	ldd	r11, Z+1	; 0x01
 90e:	26 ff       	sbrs	r18, 6
 910:	03 c0       	rjmp	.+6      	; 0x918 <__stack+0x19>
 912:	65 2d       	mov	r22, r5
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
 918:	6f ef       	ldi	r22, 0xFF	; 255
 91a:	7f ef       	ldi	r23, 0xFF	; 255
 91c:	c5 01       	movw	r24, r10
 91e:	2c 87       	std	Y+12, r18	; 0x0c
 920:	0e 94 b1 05 	call	0xb62	; 0xb62 <strnlen_P>
 924:	2c 01       	movw	r4, r24
 926:	2c 85       	ldd	r18, Y+12	; 0x0c
 928:	20 68       	ori	r18, 0x80	; 128
 92a:	22 2e       	mov	r2, r18
 92c:	83 01       	movw	r16, r6
 92e:	23 fc       	sbrc	r2, 3
 930:	1b c0       	rjmp	.+54     	; 0x968 <__stack+0x69>
 932:	83 2d       	mov	r24, r3
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	48 16       	cp	r4, r24
 938:	59 06       	cpc	r5, r25
 93a:	b0 f4       	brcc	.+44     	; 0x968 <__stack+0x69>
 93c:	b7 01       	movw	r22, r14
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 946:	3a 94       	dec	r3
 948:	f4 cf       	rjmp	.-24     	; 0x932 <__stack+0x33>
 94a:	f5 01       	movw	r30, r10
 94c:	27 fc       	sbrc	r2, 7
 94e:	85 91       	lpm	r24, Z+
 950:	27 fe       	sbrs	r2, 7
 952:	81 91       	ld	r24, Z+
 954:	5f 01       	movw	r10, r30
 956:	b7 01       	movw	r22, r14
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 95e:	31 10       	cpse	r3, r1
 960:	3a 94       	dec	r3
 962:	f1 e0       	ldi	r31, 0x01	; 1
 964:	4f 1a       	sub	r4, r31
 966:	51 08       	sbc	r5, r1
 968:	41 14       	cp	r4, r1
 96a:	51 04       	cpc	r5, r1
 96c:	71 f7       	brne	.-36     	; 0x94a <__stack+0x4b>
 96e:	e5 c0       	rjmp	.+458    	; 0xb3a <__stack+0x23b>
 970:	84 36       	cpi	r24, 0x64	; 100
 972:	11 f0       	breq	.+4      	; 0x978 <__stack+0x79>
 974:	89 36       	cpi	r24, 0x69	; 105
 976:	39 f5       	brne	.+78     	; 0x9c6 <__stack+0xc7>
 978:	f8 01       	movw	r30, r16
 97a:	27 ff       	sbrs	r18, 7
 97c:	07 c0       	rjmp	.+14     	; 0x98c <__stack+0x8d>
 97e:	60 81       	ld	r22, Z
 980:	71 81       	ldd	r23, Z+1	; 0x01
 982:	82 81       	ldd	r24, Z+2	; 0x02
 984:	93 81       	ldd	r25, Z+3	; 0x03
 986:	0c 5f       	subi	r16, 0xFC	; 252
 988:	1f 4f       	sbci	r17, 0xFF	; 255
 98a:	08 c0       	rjmp	.+16     	; 0x99c <__stack+0x9d>
 98c:	60 81       	ld	r22, Z
 98e:	71 81       	ldd	r23, Z+1	; 0x01
 990:	07 2e       	mov	r0, r23
 992:	00 0c       	add	r0, r0
 994:	88 0b       	sbc	r24, r24
 996:	99 0b       	sbc	r25, r25
 998:	0e 5f       	subi	r16, 0xFE	; 254
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	2f 76       	andi	r18, 0x6F	; 111
 99e:	72 2e       	mov	r7, r18
 9a0:	97 ff       	sbrs	r25, 7
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__stack+0xb7>
 9a4:	90 95       	com	r25
 9a6:	80 95       	com	r24
 9a8:	70 95       	com	r23
 9aa:	61 95       	neg	r22
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	20 68       	ori	r18, 0x80	; 128
 9b4:	72 2e       	mov	r7, r18
 9b6:	2a e0       	ldi	r18, 0x0A	; 10
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	a4 01       	movw	r20, r8
 9bc:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__ultoa_invert>
 9c0:	a8 2e       	mov	r10, r24
 9c2:	a8 18       	sub	r10, r8
 9c4:	44 c0       	rjmp	.+136    	; 0xa4e <__stack+0x14f>
 9c6:	85 37       	cpi	r24, 0x75	; 117
 9c8:	29 f4       	brne	.+10     	; 0x9d4 <__stack+0xd5>
 9ca:	2f 7e       	andi	r18, 0xEF	; 239
 9cc:	b2 2e       	mov	r11, r18
 9ce:	2a e0       	ldi	r18, 0x0A	; 10
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	25 c0       	rjmp	.+74     	; 0xa1e <__stack+0x11f>
 9d4:	f2 2f       	mov	r31, r18
 9d6:	f9 7f       	andi	r31, 0xF9	; 249
 9d8:	bf 2e       	mov	r11, r31
 9da:	8f 36       	cpi	r24, 0x6F	; 111
 9dc:	c1 f0       	breq	.+48     	; 0xa0e <__stack+0x10f>
 9de:	18 f4       	brcc	.+6      	; 0x9e6 <__stack+0xe7>
 9e0:	88 35       	cpi	r24, 0x58	; 88
 9e2:	79 f0       	breq	.+30     	; 0xa02 <__stack+0x103>
 9e4:	b4 c0       	rjmp	.+360    	; 0xb4e <__stack+0x24f>
 9e6:	80 37       	cpi	r24, 0x70	; 112
 9e8:	19 f0       	breq	.+6      	; 0x9f0 <__stack+0xf1>
 9ea:	88 37       	cpi	r24, 0x78	; 120
 9ec:	21 f0       	breq	.+8      	; 0x9f6 <__stack+0xf7>
 9ee:	af c0       	rjmp	.+350    	; 0xb4e <__stack+0x24f>
 9f0:	2f 2f       	mov	r18, r31
 9f2:	20 61       	ori	r18, 0x10	; 16
 9f4:	b2 2e       	mov	r11, r18
 9f6:	b4 fe       	sbrs	r11, 4
 9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__stack+0x115>
 9fa:	8b 2d       	mov	r24, r11
 9fc:	84 60       	ori	r24, 0x04	; 4
 9fe:	b8 2e       	mov	r11, r24
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <__stack+0x115>
 a02:	24 ff       	sbrs	r18, 4
 a04:	0a c0       	rjmp	.+20     	; 0xa1a <__stack+0x11b>
 a06:	9f 2f       	mov	r25, r31
 a08:	96 60       	ori	r25, 0x06	; 6
 a0a:	b9 2e       	mov	r11, r25
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__stack+0x11b>
 a0e:	28 e0       	ldi	r18, 0x08	; 8
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	05 c0       	rjmp	.+10     	; 0xa1e <__stack+0x11f>
 a14:	20 e1       	ldi	r18, 0x10	; 16
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <__stack+0x11f>
 a1a:	20 e1       	ldi	r18, 0x10	; 16
 a1c:	32 e0       	ldi	r19, 0x02	; 2
 a1e:	f8 01       	movw	r30, r16
 a20:	b7 fe       	sbrs	r11, 7
 a22:	07 c0       	rjmp	.+14     	; 0xa32 <__stack+0x133>
 a24:	60 81       	ld	r22, Z
 a26:	71 81       	ldd	r23, Z+1	; 0x01
 a28:	82 81       	ldd	r24, Z+2	; 0x02
 a2a:	93 81       	ldd	r25, Z+3	; 0x03
 a2c:	0c 5f       	subi	r16, 0xFC	; 252
 a2e:	1f 4f       	sbci	r17, 0xFF	; 255
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <__stack+0x13f>
 a32:	60 81       	ld	r22, Z
 a34:	71 81       	ldd	r23, Z+1	; 0x01
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 5f       	subi	r16, 0xFE	; 254
 a3c:	1f 4f       	sbci	r17, 0xFF	; 255
 a3e:	a4 01       	movw	r20, r8
 a40:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__ultoa_invert>
 a44:	a8 2e       	mov	r10, r24
 a46:	a8 18       	sub	r10, r8
 a48:	fb 2d       	mov	r31, r11
 a4a:	ff 77       	andi	r31, 0x7F	; 127
 a4c:	7f 2e       	mov	r7, r31
 a4e:	76 fe       	sbrs	r7, 6
 a50:	0b c0       	rjmp	.+22     	; 0xa68 <__stack+0x169>
 a52:	37 2d       	mov	r19, r7
 a54:	3e 7f       	andi	r19, 0xFE	; 254
 a56:	a5 14       	cp	r10, r5
 a58:	50 f4       	brcc	.+20     	; 0xa6e <__stack+0x16f>
 a5a:	74 fe       	sbrs	r7, 4
 a5c:	0a c0       	rjmp	.+20     	; 0xa72 <__stack+0x173>
 a5e:	72 fc       	sbrc	r7, 2
 a60:	08 c0       	rjmp	.+16     	; 0xa72 <__stack+0x173>
 a62:	37 2d       	mov	r19, r7
 a64:	3e 7e       	andi	r19, 0xEE	; 238
 a66:	05 c0       	rjmp	.+10     	; 0xa72 <__stack+0x173>
 a68:	ba 2c       	mov	r11, r10
 a6a:	37 2d       	mov	r19, r7
 a6c:	03 c0       	rjmp	.+6      	; 0xa74 <__stack+0x175>
 a6e:	ba 2c       	mov	r11, r10
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <__stack+0x175>
 a72:	b5 2c       	mov	r11, r5
 a74:	34 ff       	sbrs	r19, 4
 a76:	0d c0       	rjmp	.+26     	; 0xa92 <__stack+0x193>
 a78:	fe 01       	movw	r30, r28
 a7a:	ea 0d       	add	r30, r10
 a7c:	f1 1d       	adc	r31, r1
 a7e:	80 81       	ld	r24, Z
 a80:	80 33       	cpi	r24, 0x30	; 48
 a82:	11 f4       	brne	.+4      	; 0xa88 <__stack+0x189>
 a84:	39 7e       	andi	r19, 0xE9	; 233
 a86:	09 c0       	rjmp	.+18     	; 0xa9a <__stack+0x19b>
 a88:	32 ff       	sbrs	r19, 2
 a8a:	06 c0       	rjmp	.+12     	; 0xa98 <__stack+0x199>
 a8c:	b3 94       	inc	r11
 a8e:	b3 94       	inc	r11
 a90:	04 c0       	rjmp	.+8      	; 0xa9a <__stack+0x19b>
 a92:	83 2f       	mov	r24, r19
 a94:	86 78       	andi	r24, 0x86	; 134
 a96:	09 f0       	breq	.+2      	; 0xa9a <__stack+0x19b>
 a98:	b3 94       	inc	r11
 a9a:	33 fd       	sbrc	r19, 3
 a9c:	13 c0       	rjmp	.+38     	; 0xac4 <__stack+0x1c5>
 a9e:	30 ff       	sbrs	r19, 0
 aa0:	06 c0       	rjmp	.+12     	; 0xaae <__stack+0x1af>
 aa2:	5a 2c       	mov	r5, r10
 aa4:	b3 14       	cp	r11, r3
 aa6:	18 f4       	brcc	.+6      	; 0xaae <__stack+0x1af>
 aa8:	53 0c       	add	r5, r3
 aaa:	5b 18       	sub	r5, r11
 aac:	b3 2c       	mov	r11, r3
 aae:	b3 14       	cp	r11, r3
 ab0:	68 f4       	brcc	.+26     	; 0xacc <__stack+0x1cd>
 ab2:	b7 01       	movw	r22, r14
 ab4:	80 e2       	ldi	r24, 0x20	; 32
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	3c 87       	std	Y+12, r19	; 0x0c
 aba:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 abe:	b3 94       	inc	r11
 ac0:	3c 85       	ldd	r19, Y+12	; 0x0c
 ac2:	f5 cf       	rjmp	.-22     	; 0xaae <__stack+0x1af>
 ac4:	b3 14       	cp	r11, r3
 ac6:	10 f4       	brcc	.+4      	; 0xacc <__stack+0x1cd>
 ac8:	3b 18       	sub	r3, r11
 aca:	01 c0       	rjmp	.+2      	; 0xace <__stack+0x1cf>
 acc:	31 2c       	mov	r3, r1
 ace:	34 ff       	sbrs	r19, 4
 ad0:	12 c0       	rjmp	.+36     	; 0xaf6 <__stack+0x1f7>
 ad2:	b7 01       	movw	r22, r14
 ad4:	80 e3       	ldi	r24, 0x30	; 48
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	3c 87       	std	Y+12, r19	; 0x0c
 ada:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 ade:	3c 85       	ldd	r19, Y+12	; 0x0c
 ae0:	32 ff       	sbrs	r19, 2
 ae2:	17 c0       	rjmp	.+46     	; 0xb12 <__stack+0x213>
 ae4:	31 fd       	sbrc	r19, 1
 ae6:	03 c0       	rjmp	.+6      	; 0xaee <__stack+0x1ef>
 ae8:	88 e7       	ldi	r24, 0x78	; 120
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__stack+0x1f3>
 aee:	88 e5       	ldi	r24, 0x58	; 88
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	b7 01       	movw	r22, r14
 af4:	0c c0       	rjmp	.+24     	; 0xb0e <__stack+0x20f>
 af6:	83 2f       	mov	r24, r19
 af8:	86 78       	andi	r24, 0x86	; 134
 afa:	59 f0       	breq	.+22     	; 0xb12 <__stack+0x213>
 afc:	31 ff       	sbrs	r19, 1
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <__stack+0x205>
 b00:	8b e2       	ldi	r24, 0x2B	; 43
 b02:	01 c0       	rjmp	.+2      	; 0xb06 <__stack+0x207>
 b04:	80 e2       	ldi	r24, 0x20	; 32
 b06:	37 fd       	sbrc	r19, 7
 b08:	8d e2       	ldi	r24, 0x2D	; 45
 b0a:	b7 01       	movw	r22, r14
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 b12:	a5 14       	cp	r10, r5
 b14:	38 f4       	brcc	.+14     	; 0xb24 <__stack+0x225>
 b16:	b7 01       	movw	r22, r14
 b18:	80 e3       	ldi	r24, 0x30	; 48
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 b20:	5a 94       	dec	r5
 b22:	f7 cf       	rjmp	.-18     	; 0xb12 <__stack+0x213>
 b24:	aa 94       	dec	r10
 b26:	f4 01       	movw	r30, r8
 b28:	ea 0d       	add	r30, r10
 b2a:	f1 1d       	adc	r31, r1
 b2c:	80 81       	ld	r24, Z
 b2e:	b7 01       	movw	r22, r14
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 b36:	a1 10       	cpse	r10, r1
 b38:	f5 cf       	rjmp	.-22     	; 0xb24 <__stack+0x225>
 b3a:	33 20       	and	r3, r3
 b3c:	09 f4       	brne	.+2      	; 0xb40 <__stack+0x241>
 b3e:	51 ce       	rjmp	.-862    	; 0x7e2 <vfprintf+0x24>
 b40:	b7 01       	movw	r22, r14
 b42:	80 e2       	ldi	r24, 0x20	; 32
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 94 c7 05 	call	0xb8e	; 0xb8e <fputc>
 b4a:	3a 94       	dec	r3
 b4c:	f6 cf       	rjmp	.-20     	; 0xb3a <__stack+0x23b>
 b4e:	f7 01       	movw	r30, r14
 b50:	86 81       	ldd	r24, Z+6	; 0x06
 b52:	97 81       	ldd	r25, Z+7	; 0x07
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <__stack+0x25b>
 b56:	8f ef       	ldi	r24, 0xFF	; 255
 b58:	9f ef       	ldi	r25, 0xFF	; 255
 b5a:	2c 96       	adiw	r28, 0x0c	; 12
 b5c:	e2 e1       	ldi	r30, 0x12	; 18
 b5e:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__epilogue_restores__>

00000b62 <strnlen_P>:
 b62:	fc 01       	movw	r30, r24
 b64:	05 90       	lpm	r0, Z+
 b66:	61 50       	subi	r22, 0x01	; 1
 b68:	70 40       	sbci	r23, 0x00	; 0
 b6a:	01 10       	cpse	r0, r1
 b6c:	d8 f7       	brcc	.-10     	; 0xb64 <strnlen_P+0x2>
 b6e:	80 95       	com	r24
 b70:	90 95       	com	r25
 b72:	8e 0f       	add	r24, r30
 b74:	9f 1f       	adc	r25, r31
 b76:	08 95       	ret

00000b78 <strnlen>:
 b78:	fc 01       	movw	r30, r24
 b7a:	61 50       	subi	r22, 0x01	; 1
 b7c:	70 40       	sbci	r23, 0x00	; 0
 b7e:	01 90       	ld	r0, Z+
 b80:	01 10       	cpse	r0, r1
 b82:	d8 f7       	brcc	.-10     	; 0xb7a <strnlen+0x2>
 b84:	80 95       	com	r24
 b86:	90 95       	com	r25
 b88:	8e 0f       	add	r24, r30
 b8a:	9f 1f       	adc	r25, r31
 b8c:	08 95       	ret

00000b8e <fputc>:
 b8e:	0f 93       	push	r16
 b90:	1f 93       	push	r17
 b92:	cf 93       	push	r28
 b94:	df 93       	push	r29
 b96:	fb 01       	movw	r30, r22
 b98:	23 81       	ldd	r18, Z+3	; 0x03
 b9a:	21 fd       	sbrc	r18, 1
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <fputc+0x16>
 b9e:	8f ef       	ldi	r24, 0xFF	; 255
 ba0:	9f ef       	ldi	r25, 0xFF	; 255
 ba2:	28 c0       	rjmp	.+80     	; 0xbf4 <fputc+0x66>
 ba4:	22 ff       	sbrs	r18, 2
 ba6:	16 c0       	rjmp	.+44     	; 0xbd4 <fputc+0x46>
 ba8:	46 81       	ldd	r20, Z+6	; 0x06
 baa:	57 81       	ldd	r21, Z+7	; 0x07
 bac:	24 81       	ldd	r18, Z+4	; 0x04
 bae:	35 81       	ldd	r19, Z+5	; 0x05
 bb0:	42 17       	cp	r20, r18
 bb2:	53 07       	cpc	r21, r19
 bb4:	44 f4       	brge	.+16     	; 0xbc6 <fputc+0x38>
 bb6:	a0 81       	ld	r26, Z
 bb8:	b1 81       	ldd	r27, Z+1	; 0x01
 bba:	9d 01       	movw	r18, r26
 bbc:	2f 5f       	subi	r18, 0xFF	; 255
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	31 83       	std	Z+1, r19	; 0x01
 bc2:	20 83       	st	Z, r18
 bc4:	8c 93       	st	X, r24
 bc6:	26 81       	ldd	r18, Z+6	; 0x06
 bc8:	37 81       	ldd	r19, Z+7	; 0x07
 bca:	2f 5f       	subi	r18, 0xFF	; 255
 bcc:	3f 4f       	sbci	r19, 0xFF	; 255
 bce:	37 83       	std	Z+7, r19	; 0x07
 bd0:	26 83       	std	Z+6, r18	; 0x06
 bd2:	10 c0       	rjmp	.+32     	; 0xbf4 <fputc+0x66>
 bd4:	eb 01       	movw	r28, r22
 bd6:	09 2f       	mov	r16, r25
 bd8:	18 2f       	mov	r17, r24
 bda:	00 84       	ldd	r0, Z+8	; 0x08
 bdc:	f1 85       	ldd	r31, Z+9	; 0x09
 bde:	e0 2d       	mov	r30, r0
 be0:	09 95       	icall
 be2:	89 2b       	or	r24, r25
 be4:	e1 f6       	brne	.-72     	; 0xb9e <fputc+0x10>
 be6:	8e 81       	ldd	r24, Y+6	; 0x06
 be8:	9f 81       	ldd	r25, Y+7	; 0x07
 bea:	01 96       	adiw	r24, 0x01	; 1
 bec:	9f 83       	std	Y+7, r25	; 0x07
 bee:	8e 83       	std	Y+6, r24	; 0x06
 bf0:	81 2f       	mov	r24, r17
 bf2:	90 2f       	mov	r25, r16
 bf4:	df 91       	pop	r29
 bf6:	cf 91       	pop	r28
 bf8:	1f 91       	pop	r17
 bfa:	0f 91       	pop	r16
 bfc:	08 95       	ret

00000bfe <__ultoa_invert>:
 bfe:	fa 01       	movw	r30, r20
 c00:	aa 27       	eor	r26, r26
 c02:	28 30       	cpi	r18, 0x08	; 8
 c04:	51 f1       	breq	.+84     	; 0xc5a <__ultoa_invert+0x5c>
 c06:	20 31       	cpi	r18, 0x10	; 16
 c08:	81 f1       	breq	.+96     	; 0xc6a <__ultoa_invert+0x6c>
 c0a:	e8 94       	clt
 c0c:	6f 93       	push	r22
 c0e:	6e 7f       	andi	r22, 0xFE	; 254
 c10:	6e 5f       	subi	r22, 0xFE	; 254
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	af 4f       	sbci	r26, 0xFF	; 255
 c1a:	b1 e0       	ldi	r27, 0x01	; 1
 c1c:	3e d0       	rcall	.+124    	; 0xc9a <__ultoa_invert+0x9c>
 c1e:	b4 e0       	ldi	r27, 0x04	; 4
 c20:	3c d0       	rcall	.+120    	; 0xc9a <__ultoa_invert+0x9c>
 c22:	67 0f       	add	r22, r23
 c24:	78 1f       	adc	r23, r24
 c26:	89 1f       	adc	r24, r25
 c28:	9a 1f       	adc	r25, r26
 c2a:	a1 1d       	adc	r26, r1
 c2c:	68 0f       	add	r22, r24
 c2e:	79 1f       	adc	r23, r25
 c30:	8a 1f       	adc	r24, r26
 c32:	91 1d       	adc	r25, r1
 c34:	a1 1d       	adc	r26, r1
 c36:	6a 0f       	add	r22, r26
 c38:	71 1d       	adc	r23, r1
 c3a:	81 1d       	adc	r24, r1
 c3c:	91 1d       	adc	r25, r1
 c3e:	a1 1d       	adc	r26, r1
 c40:	20 d0       	rcall	.+64     	; 0xc82 <__ultoa_invert+0x84>
 c42:	09 f4       	brne	.+2      	; 0xc46 <__ultoa_invert+0x48>
 c44:	68 94       	set
 c46:	3f 91       	pop	r19
 c48:	2a e0       	ldi	r18, 0x0A	; 10
 c4a:	26 9f       	mul	r18, r22
 c4c:	11 24       	eor	r1, r1
 c4e:	30 19       	sub	r19, r0
 c50:	30 5d       	subi	r19, 0xD0	; 208
 c52:	31 93       	st	Z+, r19
 c54:	de f6       	brtc	.-74     	; 0xc0c <__ultoa_invert+0xe>
 c56:	cf 01       	movw	r24, r30
 c58:	08 95       	ret
 c5a:	46 2f       	mov	r20, r22
 c5c:	47 70       	andi	r20, 0x07	; 7
 c5e:	40 5d       	subi	r20, 0xD0	; 208
 c60:	41 93       	st	Z+, r20
 c62:	b3 e0       	ldi	r27, 0x03	; 3
 c64:	0f d0       	rcall	.+30     	; 0xc84 <__ultoa_invert+0x86>
 c66:	c9 f7       	brne	.-14     	; 0xc5a <__ultoa_invert+0x5c>
 c68:	f6 cf       	rjmp	.-20     	; 0xc56 <__ultoa_invert+0x58>
 c6a:	46 2f       	mov	r20, r22
 c6c:	4f 70       	andi	r20, 0x0F	; 15
 c6e:	40 5d       	subi	r20, 0xD0	; 208
 c70:	4a 33       	cpi	r20, 0x3A	; 58
 c72:	18 f0       	brcs	.+6      	; 0xc7a <__ultoa_invert+0x7c>
 c74:	49 5d       	subi	r20, 0xD9	; 217
 c76:	31 fd       	sbrc	r19, 1
 c78:	40 52       	subi	r20, 0x20	; 32
 c7a:	41 93       	st	Z+, r20
 c7c:	02 d0       	rcall	.+4      	; 0xc82 <__ultoa_invert+0x84>
 c7e:	a9 f7       	brne	.-22     	; 0xc6a <__ultoa_invert+0x6c>
 c80:	ea cf       	rjmp	.-44     	; 0xc56 <__ultoa_invert+0x58>
 c82:	b4 e0       	ldi	r27, 0x04	; 4
 c84:	a6 95       	lsr	r26
 c86:	97 95       	ror	r25
 c88:	87 95       	ror	r24
 c8a:	77 95       	ror	r23
 c8c:	67 95       	ror	r22
 c8e:	ba 95       	dec	r27
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0x86>
 c92:	00 97       	sbiw	r24, 0x00	; 0
 c94:	61 05       	cpc	r22, r1
 c96:	71 05       	cpc	r23, r1
 c98:	08 95       	ret
 c9a:	9b 01       	movw	r18, r22
 c9c:	ac 01       	movw	r20, r24
 c9e:	0a 2e       	mov	r0, r26
 ca0:	06 94       	lsr	r0
 ca2:	57 95       	ror	r21
 ca4:	47 95       	ror	r20
 ca6:	37 95       	ror	r19
 ca8:	27 95       	ror	r18
 caa:	ba 95       	dec	r27
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__ultoa_invert+0xa2>
 cae:	62 0f       	add	r22, r18
 cb0:	73 1f       	adc	r23, r19
 cb2:	84 1f       	adc	r24, r20
 cb4:	95 1f       	adc	r25, r21
 cb6:	a0 1d       	adc	r26, r0
 cb8:	08 95       	ret

00000cba <__prologue_saves__>:
 cba:	2f 92       	push	r2
 cbc:	3f 92       	push	r3
 cbe:	4f 92       	push	r4
 cc0:	5f 92       	push	r5
 cc2:	6f 92       	push	r6
 cc4:	7f 92       	push	r7
 cc6:	8f 92       	push	r8
 cc8:	9f 92       	push	r9
 cca:	af 92       	push	r10
 ccc:	bf 92       	push	r11
 cce:	cf 92       	push	r12
 cd0:	df 92       	push	r13
 cd2:	ef 92       	push	r14
 cd4:	ff 92       	push	r15
 cd6:	0f 93       	push	r16
 cd8:	1f 93       	push	r17
 cda:	cf 93       	push	r28
 cdc:	df 93       	push	r29
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
 ce2:	ca 1b       	sub	r28, r26
 ce4:	db 0b       	sbc	r29, r27
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	f8 94       	cli
 cea:	de bf       	out	0x3e, r29	; 62
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	cd bf       	out	0x3d, r28	; 61
 cf0:	09 94       	ijmp

00000cf2 <__epilogue_restores__>:
 cf2:	2a 88       	ldd	r2, Y+18	; 0x12
 cf4:	39 88       	ldd	r3, Y+17	; 0x11
 cf6:	48 88       	ldd	r4, Y+16	; 0x10
 cf8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cfa:	6e 84       	ldd	r6, Y+14	; 0x0e
 cfc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cfe:	8c 84       	ldd	r8, Y+12	; 0x0c
 d00:	9b 84       	ldd	r9, Y+11	; 0x0b
 d02:	aa 84       	ldd	r10, Y+10	; 0x0a
 d04:	b9 84       	ldd	r11, Y+9	; 0x09
 d06:	c8 84       	ldd	r12, Y+8	; 0x08
 d08:	df 80       	ldd	r13, Y+7	; 0x07
 d0a:	ee 80       	ldd	r14, Y+6	; 0x06
 d0c:	fd 80       	ldd	r15, Y+5	; 0x05
 d0e:	0c 81       	ldd	r16, Y+4	; 0x04
 d10:	1b 81       	ldd	r17, Y+3	; 0x03
 d12:	aa 81       	ldd	r26, Y+2	; 0x02
 d14:	b9 81       	ldd	r27, Y+1	; 0x01
 d16:	ce 0f       	add	r28, r30
 d18:	d1 1d       	adc	r29, r1
 d1a:	0f b6       	in	r0, 0x3f	; 63
 d1c:	f8 94       	cli
 d1e:	de bf       	out	0x3e, r29	; 62
 d20:	0f be       	out	0x3f, r0	; 63
 d22:	cd bf       	out	0x3d, r28	; 61
 d24:	ed 01       	movw	r28, r26
 d26:	08 95       	ret

00000d28 <_exit>:
 d28:	f8 94       	cli

00000d2a <__stop_program>:
 d2a:	ff cf       	rjmp	.-2      	; 0xd2a <__stop_program>
